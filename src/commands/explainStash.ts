import type { TextEditor, Uri } from 'vscode';
import { ProgressLocation } from 'vscode';
import type { Container } from '../container';
import { GitUri } from '../git/gitUri';
import type { GitStashCommit } from '../git/models/commit';
import { showGenericErrorMessage } from '../messages';
import type { AIExplainSource } from '../plus/ai/aiProviderService';
import { getBestRepositoryOrShowPicker } from '../quickpicks/repositoryPicker';
import { showStashPicker } from '../quickpicks/stashPicker';
import { command } from '../system/-webview/command';
import { showMarkdownPreview } from '../system/-webview/markdown';
import { Logger } from '../system/logger';
import { GlCommandBase } from './commandBase';
import { getCommandUri } from './commandBase.utils';
import type { CommandContext } from './commandContext';
import { isCommandContextViewNodeHasCommit } from './commandContext.utils';

export interface ExplainStashCommandArgs {
	repoPath?: string | Uri;
	ref?: string;
	source?: AIExplainSource;
}

@command()
export class ExplainStashCommand extends GlCommandBase {
	constructor(private readonly container: Container) {
		super('gitlens.ai.explainStash');
	}

	protected override preExecute(context: CommandContext, args?: ExplainStashCommandArgs): Promise<void> {
		// Check if the command is being called from a CommitNode
		if (isCommandContextViewNodeHasCommit<GitStashCommit>(context)) {
			args = { ...args };
			args.repoPath = args.repoPath ?? context.node.commit.repoPath;
			args.ref = args.ref ?? context.node.commit.sha;
			args.source = args.source ?? { source: 'view', type: 'stash' };
		}

		return this.execute(context.editor, context.uri, args);
	}

	async execute(editor?: TextEditor, uri?: Uri, args?: ExplainStashCommandArgs): Promise<void> {
		args = { ...args };

		let repository;
		if (args?.repoPath != null) {
			repository = this.container.git.getRepository(args.repoPath);
		}

		if (repository == null) {
			uri = getCommandUri(uri, editor);
			const gitUri = uri != null ? await GitUri.fromUri(uri) : undefined;
			repository = await getBestRepositoryOrShowPicker(
				gitUri,
				editor,
				'Explain Stash',
				'Choose which repository to explain a stash from',
			);
		}

		if (repository == null) return;

		try {
			// If no ref is provided, show a picker to select a stash
			if (args.ref == null) {
				const pick = await showStashPicker('Explain Stash', 'Choose a stash to explain', repository);
				if (pick?.ref == null) return;
				args.ref = pick.ref;
			}

			// Get the stash commit
			const commit = await repository.git.commits().getCommit(args.ref);
			if (commit == null) {
				void showGenericErrorMessage('Unable to find the specified stash commit');
				return;
			}

			// Call the AI service to explain the stash
			const result = await this.container.ai.explainCommit(
				commit,
				args.source ?? { source: 'commandPalette', type: 'stash' },
				{
					progress: { location: ProgressLocation.Notification, title: 'Explaining stash...' },
				},
			);

			// Display the result
			let content = `# Stash Summary\n\n`;
			if (result != null) {
				content += `> Generated by ${result.model.name}\n\n## ${commit.message || commit.ref}}\n\n${result
					?.parsed.summary}\n\n${result?.parsed.body}`;
			} else {
				content += `> No changes found to explain.`;
			}
			void showMarkdownPreview(content);
		} catch (ex) {
			Logger.error(ex, 'ExplainStashCommand', 'execute');
			void showGenericErrorMessage('Unable to explain stash');
		}
	}
}
