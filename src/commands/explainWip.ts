import type { TextEditor, Uri } from 'vscode';
import { ProgressLocation } from 'vscode';
import type { Container } from '../container';
import type { GitRepositoryService } from '../git/gitRepositoryService';
import { GitUri } from '../git/gitUri';
import { uncommitted, uncommittedStaged } from '../git/models/revision';
import { showGenericErrorMessage } from '../messages';
import type { AIExplainSource } from '../plus/ai/aiProviderService';
import { getBestRepositoryOrShowPicker } from '../quickpicks/repositoryPicker';
import { command } from '../system/-webview/command';
import { showMarkdownPreview } from '../system/-webview/markdown';
import { createMarkdownCommandLink } from '../system/commands';
import { Logger } from '../system/logger';
import { capitalize } from '../system/string';
import { GlCommandBase } from './commandBase';
import { getCommandUri } from './commandBase.utils';
import type { CommandContext } from './commandContext';
import {
	isCommandContextViewNodeHasRepoPath,
	isCommandContextViewNodeHasRepository,
	isCommandContextViewNodeHasWorktree,
} from './commandContext.utils';

export interface ExplainWipCommandArgs {
	repoPath?: string | Uri;
	staged?: boolean;
	source?: AIExplainSource;
	worktreePath?: string;
}

@command()
export class ExplainWipCommand extends GlCommandBase {
	static createMarkdownCommandLink(args: ExplainWipCommandArgs): string {
		return createMarkdownCommandLink<ExplainWipCommandArgs>('gitlens.ai.explainWip:editor', args);
	}

	constructor(private readonly container: Container) {
		super(['gitlens.ai.explainWip', 'gitlens.ai.explainWip:editor', 'gitlens.ai.explainWip:views']);
	}

	protected override preExecute(context: CommandContext, args?: ExplainWipCommandArgs): Promise<void> {
		if (isCommandContextViewNodeHasWorktree(context)) {
			args = { ...args };
			args.repoPath = context.node.worktree.repoPath;
			args.worktreePath = context.node.worktree.path;
			args.source = args.source ?? { source: 'view', type: 'wip' };
		} else if (isCommandContextViewNodeHasRepository(context)) {
			args = { ...args };
			args.repoPath = context.node.repo.path;
			args.source = args.source ?? { source: 'view', type: 'wip' };
		} else if (isCommandContextViewNodeHasRepoPath(context)) {
			args = { ...args };
			args.repoPath = context.node.repoPath;
			args.source = args.source ?? { source: 'view', type: 'wip' };
		}

		return this.execute(context.editor, context.uri, args);
	}

	async execute(editor?: TextEditor, uri?: Uri, args?: ExplainWipCommandArgs): Promise<void> {
		args = { ...args };

		// Get the diff of working changes
		const svc = await this.getRepositoryService(editor, uri, args);
		if (svc?.diff?.getDiff == null) {
			void showGenericErrorMessage('Unable to get diff service');
			return;
		}

		try {
			let label;
			let to;
			if (args?.staged === true) {
				label = 'staged';
				to = uncommittedStaged;
			} else if (args?.staged === false) {
				label = 'unstaged';
				to = uncommitted;
			} else {
				label = 'working';
				to = '';
			}

			const diff = await svc.diff.getDiff(to, undefined);
			if (!diff?.contents) {
				void showGenericErrorMessage(`No ${label} changes found to explain`);
				return;
			}

			// Get worktree info
			let worktreeInfo = '';
			let worktreeDisplayName = '';

			if (args?.worktreePath) {
				// Get the worktree name if available
				const worktrees = await svc.worktrees?.getWorktrees();
				const worktree = worktrees?.find(w => w.path === args.worktreePath);

				if (worktree) {
					worktreeInfo = ` in ${worktree.name}`;
					worktreeDisplayName = ` (${worktree.name})`;
				} else {
					worktreeInfo = ` in worktree`;
					worktreeDisplayName = ` (${args.worktreePath})`;
				}
			}

			// Call the AI service to explain the changes
			const result = await this.container.ai.explainChanges(
				{
					diff: diff.contents,
					message: `${capitalize(label)} changes${worktreeInfo}`,
				},
				{
					...args.source,
					source: args.source?.source ?? 'commandPalette',
					type: 'wip',
				},
				{
					progress: {
						location: ProgressLocation.Notification,
						title: `Explaining ${label} changes${worktreeInfo}...`,
					},
				},
			);

			if (result == null) {
				void showGenericErrorMessage(`Unable to explain ${label} changes`);
				return;
			}

			const title = `${capitalize(label)} Changes Summary${worktreeDisplayName}`;
			const content = `# ${title}\n\n> Generated by ${result.model.name}\n\n## ${label} Changes\n\n${result.parsed.summary}\n\n${result.parsed.body}`;

			void showMarkdownPreview(content);
		} catch (ex) {
			Logger.error(ex, 'ExplainWipCommand', 'execute');
			void showGenericErrorMessage('Unable to explain working changes');
		}
	}

	private async getRepositoryService(
		editor?: TextEditor,
		uri?: Uri,
		args?: ExplainWipCommandArgs,
	): Promise<GitRepositoryService | undefined> {
		let svc;
		if (args?.worktreePath) {
			svc = this.container.git.getRepositoryService(args.worktreePath);
		} else if (args?.repoPath) {
			svc = this.container.git.getRepositoryService(args.repoPath);
		} else {
			uri = getCommandUri(uri, editor);
			const gitUri = uri != null ? await GitUri.fromUri(uri) : undefined;
			const repository = await getBestRepositoryOrShowPicker(
				gitUri,
				editor,
				'Explain Working Changes',
				'Choose which repository to explain working changes from',
			);

			svc = repository?.git;
		}

		return svc;
	}
}
